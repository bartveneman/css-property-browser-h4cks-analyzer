const test = require('ava')
const isBrowserHack = require('.')

test('It recognizes browser hacks successfully', t => {
	t.true(isBrowserHack('!property'))
	t.true(isBrowserHack('$property'))
	t.true(isBrowserHack('&property'))
	t.true(isBrowserHack('*property'))
	t.true(isBrowserHack(')property'))
	t.true(isBrowserHack('=property'))
	t.true(isBrowserHack('%property'))
	t.true(isBrowserHack('+property'))
	t.true(isBrowserHack('@property'))
	t.true(isBrowserHack(',property'))
	t.true(isBrowserHack('.property'))
	t.true(isBrowserHack('/property'))
	t.true(isBrowserHack('`property'))
	t.true(isBrowserHack(']property'))
	t.true(isBrowserHack('#property'))
	t.true(isBrowserHack('~property'))
	t.true(isBrowserHack('?property'))
	t.true(isBrowserHack(':property'))
	t.true(isBrowserHack('|property'))
	t.true(isBrowserHack('_property'))
	t.true(isBrowserHack('-property'))
	t.true(isBrowserHack('-opacity'))
	t.true(isBrowserHack('(;property'))
	t.true(isBrowserHack('[;property'))
	t.true(isBrowserHack('-PROPERTY'))
})

test('It correctly marks regular properties as non-hacks', t => {
	t.false(isBrowserHack('color'))
	t.false(isBrowserHack('-webkit-transition'))
	t.false(isBrowserHack('-moz-transition'))
	t.false(isBrowserHack('-o-transition'))
	t.false(isBrowserHack('--my-custom-property'))
	t.false(isBrowserHack('--My-Custom-Property'))
})
